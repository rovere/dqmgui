#!/usr/bin/env python

import os, time, sys, smtplib, pickle
from email.MIMEText import MIMEText
from datetime import datetime
from glob import glob
from math import sqrt
from tempfile import mkstemp
from traceback import print_exc
from socket import gethostname
from subprocess import Popen,PIPE

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

DROPBOX = sys.argv[1]           # Directory where we receive input ("drop box").

# Email to notify, multiple addresses are accepted and should be
# separated by commas without spaces
EMAIL = sys.argv[2]
ZIPREPO = sys.argv[3]           # Zip file repository.
CASTORREPO = sys.argv[4]        # Zip file repository in CASTOR.

# Time hours to wait for the files to be migrated to tape
MIGRTIME = int(sys.argv[5]) * 3600
NEXT = sys.argv[6:]             # Directories for next agents in chain.
SENDMAIL = "/usr/sbin/sendmail" # sendmail location

# Number of times that we will try to find out if the file is
# transferred to tape before reporting it.
RETRIES = 7

# We want to have different length time intervals between retries, for
# this purpose we calculate the actual maximum number of retries a
# file will go trough before we start reporting problems.
MAXTRIES = ((RETRIES / 2) * (RETRIES + 1))

# "new" dictionary pickle filename
STATE_PICKLE_FILENAME = "state.pickle"

# --------------------------------------------------------------------
def logme(msg, *args):
  procid = "[%s/%d]" % (__file__.rsplit("/", 1)[-1], os.getpid())
  print datetime.now(), procid, msg % args

def runme(cmd, *args, **keys):
  try:
    fcmd = cmd % args
    scall = Popen(fcmd.split(" "), stdout=PIPE,stderr=PIPE)
    (sc_stdout, sc_stderr) = scall.communicate()
    retcodes = "retcodes" in keys and keys["retcodes"] or (0, )
    assert scall.returncode in retcodes

  except AssertionError, e:
    logme("ERROR: Command execution failed ('%s') with error message: %s",
                fcmd, sc_stderr.replace('\n',"\016"))

  return (scall.returncode, sc_stdout, sc_stderr)

def sendmail(body="Hello from visDQMZipCastorVerifier"):
  scall = Popen("%s -t" % SENDMAIL, shell=True, stdin=PIPE)
  scall.stdin.write("To: %s\n" % EMAIL)
  scall.stdin.write("Subject: Problem verifying file transfer to tape in CASTOR\n")
  scall.stdin.write("\n") # blank line separating headers from body
  scall.stdin.write("%s\n" % body)
  scall.stdin.close()
  rc = scall.wait()
  if rc != 0:
     logme("ERROR: Sendmail exit with status %s", rc)

def current_umask():
  val = os.umask(0)
  os.umask(val)
  return val

def load_persistent_state():
  # We persist the "new" dictionary, the "WARNINGS" dictionary and the
  # "last_warnings_flush" time between different runs by pickle'ing it to a
  # file in our dropbox. The file is called new.pyckle.
  # If the file exists, we try to unpickle it, to get our "new".
  # If it does not exist, we just start with an empty dictionary.
  pickle_file = os.path.join(DROPBOX, STATE_PICKLE_FILENAME)

  if os.path.isfile(pickle_file):
    logme("Found a persistent version of the state in file %s." % pickle_file)
    try:
      state = pickle.load(open(pickle_file, "rb" ))
      new, WARNINGS, last_warnings_flush = state
      # We assume that if the file exists and it can be loaded, it's fine.
      # Otherwise it would be sabotage anyway and there's no way to counter it.
      logme("It was loaded succesfully and contains %s new, %s warnings and "
            "last warning flushed at %s." %
                         (len(new), len(WARNINGS), str(last_warnings_flush)))
      return (new, WARNINGS, last_warnings_flush)
    except:
      logme("Couldn't load the pickle file. %s" % sys.exc_info()[0])
      logme("Started with a new epty dictionary.")
      return ({}, {}, time.time())
  else:
    logme("Could not find a persistent version of the state in the "
          "dropbox. Started with a new empty dictionary.")
    return ({}, {}, time.time())

def persist_persistent_state(new):
  # We persist the "new" dictionary, the "WARNINGS" dictionary and the
  # "last_warnings_flush" time between different runs by pickle'ing it to a
  # file in our dropbox. The file is called state.pyckle.
  pickle_file = os.path.join(DROPBOX, STATE_PICKLE_FILENAME)
  try:
    state = (new, WARNINGS, last_warnings_flush)
    pickle.dump(state, open(pickle_file, "wb" ))
    logme("Succesfully dumped state with %s new, %s warnings and "
          "last warning flushed at %s in pickle file at %s." %
            (len(new), len(WARNINGS), str(last_warnings_flush), pickle_file))
  except:
    logme("Couldn't dump the pickle file to %s. %s" % (pickle_file,
                                                       sys.exc_info()))

# --------------------------------------------------------------------
# Create a persistent directory to store the file information over
# RETRIES process loops.
#
# The "new" directory would be created/modified as follows:
# 1. On every cycle we pick up the zinfo files from the dropbox.
# 2. If we have not seen the file before, we create a new entry in the
#    directory and record the time of the operation, otherwise we
#    update the entry for that file by recording how many times the
#    file has been processed.
# 3. If the verification process succeeds, we move the zinfo file to
#    the NEXT file folders, also, we remove the entry for that file
#    from the directory.
#
# We assume that the zinfo file does not change between cycles.

myumask = current_umask()

# Main program flow:
logme("Starting visDQMZipCastorVerifier")
new, WARNINGS, last_warnings_flush = load_persistent_state()
try:
  now=time.time()
  if len(WARNINGS) > 0 and now - last_warnings_flush > 24 * 3600:
    msg = "I got %d messages in the past 24 hours\n\n\n" %  len(WARNINGS)
    msg += "# of Occurrences: Message\n"
    msg += "\n".join(["%4d: %s" % (y,x) for x , y in WARNINGS.items() ])
    msg += "\n\nRegards\nZip Verify Daemon on %s" % gethostname()
    sendmail(msg)
    WARNINGS = {}
    last_warnings_flush = now

  for zf in glob("%s/*.zip.zinfo" % DROPBOX):
    if zf in new:
      # To get a variable length time period between retries we only
      # enable the file to be processed every time the 'tries' field
      # solves exactly (type(n)=int) the equation for the sequence
      # vtries=((n/2)*(n+1)). 'vtries' gets taken in to account only
      # when more than MIGRTIME has passed.
      if now - MIGRTIME > new[zf]['vtime']:
        new[zf]['vtries'] += 1
        n = (1 + sqrt(1 + 8 * new[zf]['vtries'])) / 2
        if n % int(n) == 0:
          new[zf]['process'] = True
        else:
          new[zf]['process'] = False

    else:
      # Read zinfo file
      try:
        info = eval(file(zf).read())
      except:
        continue

      new.setdefault(zf, {}).update(info)
      new[zf]['vtries'] = 0
      new[zf]['process'] = False
      new[zf]['vtime'] = now

  # Verify if the file has been copied to tape after MIGRTIME
  # hours have passed. If the check fails, try to determine the file
  # status and try again later.
  #
  # Report back to the operator if we have checked the file RETRIES
  # times and the status is unchanged.
  for (f, info) in new.items():
    if not info['process']:
      continue

    cname = "%s/%s" % (CASTORREPO, info['zpath'])
    cdir = "%s/%s" % (CASTORREPO, info['zpath'].rsplit("/",1)[0])
    lname = "%s/%s" % (ZIPREPO, info['zpath'])
    try:
      (rc, so, se) = runme("nsls -T %s", cname)
      if not rc == 0:
        assert False, "WARNING: %s: nsls -T failed with following error:[%d,'%s']" % \
              (cname,rc,se)

      if so == "":
        (rc, so, se) = runme("stager_qry -M %s", cname)
        if "CANBEMIGR" not in so and "STAGED" not in so:
          assert False, "WARNING: %s: unexpected stager state: %s" % (cname, so)
        elif "CANBEMIGR" in so and info["vtries"] > MAXTRIES:
          assert False, "WARNING: %s: still in CANBEMIGR state" % cname

        continue

      # Store time of the operation. Remove the 'Process' key
      # because it is an internal value for the agent and there is
      # no need to save it to the zinfo file.
      info["vtime"] = now
      del info["process"]
      zinfopath = "%s/%s.zinfo" % (ZIPREPO, info['zpath'])
      (dname, filepart) = zinfopath.rsplit("/", 1)
      (fd, tmp) = mkstemp(dir=dname)
      os.write(fd, "%s\n" % info)
      os.close(fd)
      os.chmod(tmp, 0666 & ~myumask)
      os.rename(tmp, zinfopath)

      # Print a small diagnostic
      logme("INFO: %s successfully transferred to TAPE on %f seconds",
            cname,info["vtime"]-info["stime"])

      # Move the tasks to the next drop box.
      for n in NEXT:
        if not os.path.exists(n):
          os.makedirs(n)
        nfile = "%s/%s.zinfo" % (n, info["zpath"].rsplit("/", 1)[-1])
        if not os.path.exists(nfile):
          os.link(zinfopath, nfile)

      # Clear out drop box and new
      if os.path.isfile(f):
        os.remove(f)
      del new[f]

    except AssertionError, e:
      info['process'] = False
      msg = str(e)
      WARNINGS[msg] = WARNINGS.setdefault(msg, 0) + 1
      logme(msg)
      continue

# If anything bad happened, barf but keep going.
except KeyboardInterrupt, e:
  sys.exit(0)

except Exception, e:
  logme('ERROR: %s', e)
  print_exc()

finally:
  # In the end we pickle the situation of the "new" dictionary, "WARNINGS"
  # dictionary and last_warnings_flush back into the pickle file.
  persist_persistent_state(new)
