#!/usr/bin/env python

import os, time, re, sys
from traceback import print_exc
from datetime import datetime
from glob import glob

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

# --------------------------------------------------------------------
# Command line parameters
DROPBOX = sys.argv[1]           # Directory where we receive input ("drop box").
IMPORTDROPBOX = sys.argv[2]     # Dropbox for visDQMImportDaemon.
FILEREPO = sys.argv[3]          # Final file repository of original DQM files.
QUOTASFILE = sys.argv[4]        # File that contains QUOTAS information

# Global Constants
WAITTIME = 4 * 60               # Daemon cycle time, in seconds
REFRESHINTERVAL = 2 * 24 * 3600 # Time between full cache refreshing, in seconds
LOWERBOUNDARY = 0.95            # Percentage of QUOTAS to reach when deleting files
FIFORX = re.compile("^DQM_V(\d+)_.*root$")


# Global Variables
FILEDICTIONARY = {}
QUEUESIZES = {}
QUOTAS = {}
FIFOQUEUES = {}

# Control Variables
refreshQueues = True
lastRefresh = time.time()

# --------------------------------------------------------------------
def logme(msg, *args):
  procid = "[%s/%d]" % (__file__.rsplit("/", 1)[-1], os.getpid())
  print datetime.now(), procid, msg % args

# This insert method is requiring that the container receiving the
# new item is already sorted, since it's doing a poor-man's binary
# search to find the most appropriate location for the item to be
# inserted. If this condition fails, the outcome is almost random and
# very likely **not** sorted.

def sortedInsert(d,i):
  head=0
  tail=len(d) - 1
  safety=0
  while True or safety >= len(d):
    if not len(d):
      d.append(i)
      return 0

    if d[head][0] > i[0]:
      d.insert(head,i)
      return head

    if d[head][0] == i[0]:
      d.insert(head+1,i)
      return head+1

    if d[tail][0] <= i[0]:
      d.insert(tail+1,i)
      return tail+1

    if (head == tail and d[head][0] != i[0]) or \
       (head == tail - 1 and d[head][0] != i and d[tail][0] != i[0]):
      d.insert(head+1,i)
      return head+1

    m=head + int((tail-head+1)/2)
    if d[m][0] == i[0]:
      d.insert(m+1,i)
      return m+1

    if d[m][0] > i[0]:
      tail = m-1

    if d[m][0] < i[0]:
      head = m+1

    safety += 1

  if safety >= len(d):
    assert False, 'Could not insert value: %s ..., into list: %s' % \
                        (str(i)[:15],str(d)[:15])


# --------------------------------------------------------------------
# The RootFileQuotaControl agent takes quotas assigned to the DQM file
# classes and enforces them on the ROOT file repository. The quotas are
# provided in a python file which contains a dictionary with the
# amount of disk space to allocate to each data class e.g.
# {"online_data": 5 * 1024 ** 3, "offline_data": 5 * 1024 ** 3}
#
# The FIFO queues work as follow: when a new file arrives and makes
# the QUOTAS allocated for its class exceed the desired value,
# the oldest files in the queue get deleted until the size of the
# queue on disk reaches LOWERBOUNDARY % of the acceptable levels.

# Import QUOTAS
try:
  QUOTAS = eval(file(QUOTASFILE).read())
except:
  logme("ERROR: Invalid quotas file")
  print_exc()
  sys.exit(2)

# Process files forever.
while True:
  try:
    if refreshQueues:
      FILEDICTIONARY = {}
      QUEUESIZES = {}
      FIFOQUEUES = {}
      filesNotInIndex = glob("%s/*.dqminfo" % IMPORTDROPBOX)
      logme('INFO: scanning final root file repository: %s' % FILEREPO)
      for d,sd,fs in os.walk(FILEREPO):
        for f in fs:
          rootFile = FIFORX.match(f)
          if rootFile:
            # Read in the file info.
            path = "%s/%s" % (d,f)
            try:
              info = eval(file("%s.dqminfo" % path).read())
            except:
              continue

            fSize = info['size']
            fMtime = info['time']
            fClass = info['class']
            # Use exact filename and do not strip version out of it:
            # stripping it would cause the container to be modified in
            # case more than one version of the same file is sitting
            # on the server. Unfortunately the modification of the
            # container is done w/o passing through the sortedInsert,
            # and hence spoils its internal ordering (queue is a list
            # that holds **references** to entries in FILEDICTIONARY,
            # hence a later change to any of those entries is
            # reflected in a change in the corresponding reference in
            # queue).
            fName = f
            if "%s/%s.dqminfo" % (IMPORTDROPBOX, f) in filesNotInIndex:
              continue

            qEntry = FILEDICTIONARY.setdefault(fClass, {}).setdefault(
                                     fName,[fMtime,fSize,fName,d])

            queue = FIFOQUEUES.setdefault(fClass,[])
            sortedInsert(queue,qEntry)

      # Calculate QUEUESIZES
      for c in FILEDICTIONARY.keys():
        QUEUESIZES.setdefault(c, 0)
        QUEUESIZES[c] = sum([x[1] for x in FIFOQUEUES[c]])
        logme("INFO: size for class %s is %d[%d]." % (c, QUEUESIZES[c], QUOTAS[c]))
      refreshQueues = False

    # Find new ROOT files in the dropbox.
    new = glob("%s/*.root.dqminfo" % DROPBOX)
    if len(new):
      logme('found %d new files.', len(new))

    # Append new files to queues
    for dqminfo in new:
      try:
        info = eval(file(dqminfo).read())
      except:
        logme("ERROR: dqminfo file: `%s` , can no be read", dqminfo)
        continue

      ff = "%s/%s" % (FILEREPO,info['path'])
      f = os.path.basename(ff)
      d = os.path.dirname(ff)
      rootFile = FIFORX.match(f)
      fSize = info['size']
      fClass = info['class']
      fMtime = info['time']
      fName = f
      qEntry = FILEDICTIONARY.setdefault(fClass, {}).setdefault(
                                     fName,[fMtime,0,fName,d])
      queue = FIFOQUEUES.setdefault(fClass,[])
      qSize = QUEUESIZES.setdefault(fClass, 0)
      QUEUESIZES[fClass] = qSize + fSize

      sortedInsert(queue,qEntry)

      # Clear out drop box
      os.remove(dqminfo)

    # Enforce QUEUES quotas
    for c in QUEUESIZES.keys():
      if QUOTAS[c] < QUEUESIZES[c]:
        queue = FIFOQUEUES[c]
        while QUEUESIZES[c] > LOWERBOUNDARY * QUOTAS[c]:
          logme("INFO: size for class %s is %d[%d]." % (c, QUEUESIZES[c], QUOTAS[c]))
          logme("INFO: actual Quota: %d, limit to reach: %f " %( QUEUESIZES[c], LOWERBOUNDARY * QUOTAS[c]))
          fPat = queue[0]
          fList = glob("%s/%s" % (fPat[3],fPat[2]))
          for f in fList:
            try:
              os.remove(f)
              logme("INFO: Removed file %s",f)
            except OSError,e:
              if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
                raise
              
          QUEUESIZES[c] -= fPat[1]
          del FILEDICTIONARY[c][fPat[2]]
          del queue[0]
          del fPat

    if time.time() > lastRefresh + REFRESHINTERVAL:
      lastRefresh = time.time()
      refreshQueues = True

  # If anything bad happened, barf but keep going.
  except KeyboardInterrupt, e:
    sys.exit(0)

  except Exception, e:
    refreshQueues = True
    logme('Error: %s', e)
    print_exc()

  time.sleep(WAITTIME)
